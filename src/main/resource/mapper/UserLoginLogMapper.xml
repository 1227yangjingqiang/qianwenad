<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qianwenad.storage.sys.UserLoginLogRepository" >
  <resultMap id="BaseResultMap" type="com.qianwenad.model.sys.UserLoginLog" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="ip" property="ip" jdbcType="VARCHAR" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="login_remark" property="loginRemark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>

 <sql id="Base_Column_List" >
   `id`,
   `user_id`,
   `ip`,
   `user_name`,
   `login_remark`,
   `create_time`,
   `update_time`
 </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from user_login_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from user_login_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  
  <insert id="insert" parameterType="com.qianwenad.model.sys.UserLoginLog" >
    insert into user_login_log ( 
     `id`,
     `user_id`,
     `ip`,
     `user_name`,
     `login_remark`,
     `create_time`,
     `update_time`
    )
    values (
     #{id,jdbcType=BIGINT},
     #{userId,jdbcType=VARCHAR},
     #{ip,jdbcType=VARCHAR},
     #{userName,jdbcType=VARCHAR},
     #{loginRemark,jdbcType=VARCHAR},
     #{createTime,jdbcType=TIMESTAMP},
     #{updateTime,jdbcType=TIMESTAMP}
 )
  </insert>
  
  
  
  <insert id="insertSelective" parameterType="com.qianwenad.model.sys.UserLoginLog" >
    insert into user_login_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        `id`,
      </if>
      <if test="userId != null" >
        `user_id`,
      </if>
      <if test="ip != null" >
        `ip`,
      </if>
      <if test="userName != null" >
        `user_name`,
      </if>
      <if test="loginRemark != null" >
        `login_remark`,
      </if>
      <if test="createTime != null" >
        `create_time`,
      </if>
      <if test="updateTime != null" >
        `update_time`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="ip != null" >
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="loginRemark != null" >
        #{loginRemark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.qianwenad.model.sys.UserLoginLog" >
    update user_login_log
	  <set>
       <if test="userId != null" >
        `user_id`= #{userId,jdbcType=VARCHAR},
       </if>
       <if test="ip != null" >
        `ip`= #{ip,jdbcType=VARCHAR},
       </if>
       <if test="userName != null" >
        `user_name`= #{userName,jdbcType=VARCHAR},
       </if>
       <if test="loginRemark != null" >
        `login_remark`= #{loginRemark,jdbcType=VARCHAR},
       </if>
       <if test="createTime != null" >
        `create_time`= #{createTime,jdbcType=TIMESTAMP},
       </if>
       <if test="updateTime != null" >
        `update_time`= #{updateTime,jdbcType=TIMESTAMP},
       </if>
          </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.qianwenad.model.sys.UserLoginLog" >
    update user_login_log
    set 
       `user_id` = #{userId,jdbcType=VARCHAR},
       `ip` = #{ip,jdbcType=VARCHAR},
       `user_name` = #{userName,jdbcType=VARCHAR},
       `login_remark` = #{loginRemark,jdbcType=VARCHAR},
       `create_time` = #{createTime,jdbcType=TIMESTAMP},
       `update_time` = #{updateTime,jdbcType=TIMESTAMP}
     where id = #{id,jdbcType=BIGINT}
  </update>
  

  
  <select id="selectCount" resultType="java.lang.Integer" parameterType="com.qianwenad.model.sys.UserLoginLog" >
    select count(*) from user_login_log
    <where >
            <if test="id != null" >
        and `id` = #{id,jdbcType=BIGINT}
      </if>
            <if test="userId != null" >
        and `user_id` = #{userId,jdbcType=VARCHAR}
      </if>
            <if test="ip != null" >
        and `ip` = #{ip,jdbcType=VARCHAR}
      </if>
            <if test="userName != null" >
        and `user_name` = #{userName,jdbcType=VARCHAR}
      </if>
            <if test="loginRemark != null" >
        and `login_remark` = #{loginRemark,jdbcType=VARCHAR}
      </if>
            <if test="createTime != null" >
        and `create_time` = #{createTime,jdbcType=TIMESTAMP}
      </if>
            <if test="updateTime != null" >
        and `update_time` = #{updateTime,jdbcType=TIMESTAMP}
      </if>
          </where>
  </select>

    <select id="selectPage" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from user_login_log where 1 = 1 
        <if test="userLoginLog.id != null" >
      and `id` = #{userLoginLog.id,jdbcType=BIGINT}
    </if>
        <if test="userLoginLog.userId != null" >
      and `user_id` = #{userLoginLog.userId,jdbcType=VARCHAR}
    </if>
        <if test="userLoginLog.ip != null" >
      and `ip` = #{userLoginLog.ip,jdbcType=VARCHAR}
    </if>
        <if test="userLoginLog.userName != null" >
      and `user_name` = #{userLoginLog.userName,jdbcType=VARCHAR}
    </if>
        <if test="userLoginLog.loginRemark != null" >
      and `login_remark` = #{userLoginLog.loginRemark,jdbcType=VARCHAR}
    </if>
        <if test="userLoginLog.createTime != null" >
      and `create_time` = #{userLoginLog.createTime,jdbcType=TIMESTAMP}
    </if>
        <if test="userLoginLog.updateTime != null" >
      and `update_time` = #{userLoginLog.updateTime,jdbcType=TIMESTAMP}
    </if>
        <if test="pageable.sort != null" >
      order by 
      <foreach collection="pageable.sort" item="order" separator="," >
        <if test="
   order.property == 'id' 
   || order.property == 'user_id'
   || order.property == 'ip'
   || order.property == 'user_name'
   || order.property == 'login_remark'
   || order.property == 'create_time'
   || order.property == 'update_time'
        " >
        		${order.property} ${order.direction}
        </if>
      </foreach>
    </if>
    <if test="pageable.offset >= 0 and pageable.pageSize > 0" >
      limit ${pageable.offset}, ${pageable.pageSize}
    </if>
  </select>
 </mapper>
  

  
	